{"version":3,"sources":["components/weather.component.jsx","components/Header.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","date","icon","temp","min","max","humidity","pressure","description","brief","Header","class","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Footer","target","rel","api","weatherIcon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","get_WeatherIcon","weathericon","rangeId","obj","Date","toDateString","App","useState","query","setQuery","loading","setLoading","name","weather","setWeather","search","fetch","then","res","json","result","error","console","style","marginTop","onSubmit","e","preventDefault","placeholder","onChange","value","onClick","main","sys","Math","round","temp_max","temp_min","sunrise","sunset","dt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3046384f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./weather.component.css\";\n\nconst Weather = (props) => {\n  return (\n    <div>\n      <div className=\"container weather-container text-light\">\n        <div className=\"cards pt-4\">\n          {props.city && (\n            <>\n              <h1>\n                {props.city},{props.country}\n              </h1>\n              <h4 className=\"py-3\">Last Updated : {props.date}</h4>\n              <h5 className=\"py-1\">\n                <i className={`wi ${props.icon} display-1`}></i>\n              </h5>\n              <h1 className=\"py-4\">{props.temp}&deg;</h1>\n              <h3>\n                <span className=\"px-4\">{props.min}&deg;</span>\n                <span className=\"px-4\">{props.max}&deg;</span>\n              </h3>\n              <h4>\n                <div>\n                  Humidity : <span className=\"px-4\">{props.humidity}%</span>\n                </div>\n                <div>\n                  Pressure : <span className=\"px-4\">{props.pressure} atm</span>\n                </div>\n              </h4>\n              <h5 className=\"py-3\">\n                {props.description}\n                <span>\n                  <h6>{props.brief}</h6>\n                </span>\n              </h5>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Weather;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a class=\"navbar-brand\" href=\"#\">\n        City's weather\n      </a>\n      <button\n        class=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarSupportedContent\"\n        aria-controls=\"navbarSupportedContent\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul class=\"navbar-nav ml-auto\">\n          <li class=\"nav-item active\">\n            <a class=\"nav-link\" href=\"#\">\n              Home <span class=\"sr-only\">(current)</span>\n            </a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"#\">\n              About\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./Footer.css\";\nconst Footer = () => {\n  return (\n    <>\n      <div className=\"bg-light bottom-container footer-copyright text-center py-3\">\n        <a\n          className=\"footer-link\"\n          href=\"https://www.linkedin.com/in/sandeep-v-4b01551a4/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          LinkedIn\n        </a>\n        <a\n          className=\"footer-link\"\n          href=\"https://github.com/sandeep-v1404\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </a>\n        <a\n          className=\"footer-link\"\n          href=\"https://www.instagram.com/sandeep._.144/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Instagram\n        </a>\n        <p className=\"copyright\">Â© 2020 Sandeep V @coding.tech</p>\n      </div>\n    </>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Weather from \"./components/weather.component\";\nimport Header from \"./components/Header\";\nimport \"weather-icons/css/weather-icons.css\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Footer from \"./components/Footer\";\n\nconst api = {\n  url: \"https://api.openweathermap.org/data/2.5/weather?units=metric&appid=c65082e510e9cbf36a5cae8041688105&q=\",\n};\nconst weatherIcon = {\n  Thunderstorm: \"wi-thunderstorm\",\n  Drizzle: \"wi-sleet\",\n  Rain: \"wi-storm-showers\",\n  Snow: \"wi-snow\",\n  Atmosphere: \"wi-fog\",\n  Clear: \"wi-day-sunny\",\n  Clouds: \"wi-day-fog\",\n};\nfunction get_WeatherIcon(weathericon, rangeId) {\n  switch (true) {\n    case rangeId >= 200 && rangeId < 232:\n      return weathericon.Thunderstorm;\n\n    case rangeId >= 300 && rangeId <= 321:\n      return weathericon.Drizzle;\n    case rangeId >= 500 && rangeId <= 521:\n      return weathericon.Rain;\n\n    case rangeId >= 600 && rangeId <= 622:\n      return weathericon.Snow;\n    case rangeId >= 701 && rangeId <= 781:\n      return weathericon.Atmosphere;\n    case rangeId === 800:\n      return weathericon.Clear;\n    case rangeId >= 801 && rangeId <= 804:\n      return weathericon.Clouds;\n    default:\n      return weathericon.Clouds;\n  }\n}\n\nfunction date(obj) {\n  const date = new Date(obj);\n  return date.toDateString();\n}\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [weather, setWeather] = useState({\n    name: \"City\",\n  });\n\n  const search = () => {\n    try {\n      setLoading(true);\n      fetch(`${api.url}${query}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n          setLoading(false);\n\n        });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <form\n        style={{ marginTop: \"30px\" }}\n        onSubmit={(e) => {\n          e.preventDefault();\n          search();\n        }}\n      >\n        <input\n          name=\"city\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search for a City..\"\n          onChange={(e) => setQuery(e.target.value)}\n          value={query}\n        />\n        <button className=\"btn btn-danger mt-4\" onClick={search}>\n          {loading ? \"Loading...\" : \"Get Weather\"}\n        </button>\n      </form>\n      {typeof weather.main != \"undefined\" ? (\n        <Weather\n          city={weather.name}\n          country={weather.sys.country}\n          temp={Math.round(weather.main.temp)}\n          description={weather.weather[0].main}\n          brief={weather.weather[0].description}\n          max={Math.round(weather.main.temp_max)}\n          min={Math.round(weather.main.temp_min)}\n          humidity={weather.main.humidity}\n          pressure={Math.round(weather.main.pressure / 1013.25)}\n          sunrise={date(weather.sys.sunrise * 1000)}\n          sunset={date(weather.sys.sunset * 1000)}\n          date={date(weather.dt * 1000)}\n          icon={get_WeatherIcon(weatherIcon, weather.weather[0].id)}\n        />\n      ) : <Weather />}\n      <Footer />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}